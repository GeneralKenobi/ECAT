<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ECAT.UWP"
	xmlns:converters="using:UWPEnhanced.ValueConverters"
	xmlns:xaml="using:UWPEnhanced.Xaml">


	<Style TargetType="local:WireTC">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:WireTC">
					<Grid Name="RootGrid">

						<Grid.Resources>
							<local:PlanePositionCollectionToPointCollectionConverter x:Key="PointsConverter"/>
							<local:PlanePositionCollectionToOutermostPointCollectionConverter x:Key="BorderConverter"/>
							<converters:OppositeDoubleConverter x:Key="OppositeConverter"/>
							<converters:NegateImaginaryComplexConverter x:Key="PositionConverter"/>
						</Grid.Resources>

						<!-- Context menu with delete button -->
						<Grid.ContextFlyout>
							<MenuFlyout	MenuFlyoutPresenterStyle="{StaticResource MenuFlyoutPresenterStyle}">
							
								<!-- Remove element icon -->
								<MenuFlyoutItem Style="{StaticResource ContextMenuFlyoutItemStyle}"
									Text="&#xE107;"
									FontFamily="{StaticResource SymbolThemeFontFamily}"
									Command="{Binding RemoveWireCommand}"/>

							</MenuFlyout>
						</Grid.ContextFlyout>

						<!-- Transparent hitbox that will catch all tapped events that technically still belong to this socket
						(a polyline with stroke thickness 25) and surpress them from being bubbled up (eg. to design area) which
						could, for example, allow the user to place a wire on this wire without invoking proper commands 
						related to the wire (eg. connecting the wires resulting in a misleading schematic) -->
						<Polyline Stroke="Transparent"
							StrokeThickness="{Binding HitboxLength}"
							StrokeMiterLimit="0"
							Points="{Binding Wire.ConstructionPoints, Converter={StaticResource PointsConverter}}"
							StrokeLineJoin="Round">

							<!-- Attach a trigger that will catch and surpress tapped event from being propagated -->
							<xaml:VisualAttachments.AttachedVisuals>
								<xaml:VisualTappedTrigger SetHandled="True"/>
							</xaml:VisualAttachments.AttachedVisuals>

						</Polyline>

						<!-- Polyline that visualizes the wire -->
						<Polyline Name="WirePolyline"
							Stroke="{StaticResource BlackBrush}"
							StrokeThickness="10"
							StrokeMiterLimit="0"
							Points="{Binding Wire.ConstructionPoints, Converter={StaticResource PointsConverter}}"
							StrokeLineJoin="Round">

							<!-- Wire clicked command -->
							<xaml:VisualAttachments.AttachedVisuals>
								<xaml:TappedTriggerCommandPointerPosition Command="{Binding WireClickedCommand}"
									SetHandled="True"
									Converter="{StaticResource PositionConverter}"/>
							</xaml:VisualAttachments.AttachedVisuals>
							
						</Polyline>

						<!-- Polygon that acts as a border around the wire when context menu is present -->
						<Polygon Points="{Binding Wire.DefiningPoints, Converter={StaticResource BorderConverter}}" 
							Stroke="{Binding MenuPresentBorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}"
							StrokeThickness="1"/>

						<!-- Socket on the beginning of the wire -->
						<local:WireSocketTC Position="{Binding Wire.Beginning}"
								PositionOnWire="False"/>

						<!-- Socket at the end of the wire -->
						<local:WireSocketTC Position="{Binding Wire.Ending}"
							PositionOnWire="True"/>

					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>
